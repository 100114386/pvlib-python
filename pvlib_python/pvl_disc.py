# Autogenerated with SMOP version 0.23
# /usr/local/bin/smop pvl_disc.m -o python/pvl_disc.py
import numpy as np
import pvl_tools as pvt
import pandas as pd
import pdb

def pvl_disc(**kwargs):
    Expect={'GHI': ('array','num','x>=0'),
            'SunZen': ('array','num','x<=180','x>=0'),
            'Time':''
            #'pressure':('matelement','array','num','default','default=101325','x>=0'),
            }

    var=pvt.Parse(kwargs,Expect)

    # pressure=p.Results.pressure
    # GHI=GHI*(ones(np.max(np.array([GHI.size,Z.size,doy.size,pressure.size]).reshape(1,-1)),1))
    # Z=Z[:]
    # doy=doy[:]
    # pressure=pressure[:]
    # DayAngle=np.zeros(max(GHI.shape),1)
    # re=np.zeros(max(GHI.shape),1)
    # I0=np.zeros(max(GHI.shape),1)
    # I0h=np.zeros(max(GHI.shape),1)
    # A=np.zeros(max(GHI.shape),1)
    # B=np.zeros(max(GHI.shape),1)
    # C=np.zeros(max(GHI.shape),1)
    # delKn=np.zeros(max(GHI.shape),1)
    # Knc=np.zeros(max(GHI.shape),1)
    # DNI=np.zeros(max(GHI.shape),1)
    # AM=np.zeros(max(GHI.shape),1)
    # Kt=np.zeros(max(GHI.shape),1)

    #create a temporary dataframe to house masked values, initially filled with NaN
    temp=pd.DataFrame(index=var.Time,columns=['A','B','C'])


    var.pressure=101325
    doy=var.Time.dayofyear
    DayAngle=2.0 * np.pi*((doy - 1)) / 365
    re=1.00011 + 0.034221*(np.cos(DayAngle)) + (0.00128)*(np.sin(DayAngle)) + 0.000719*(np.cos(2.0 * DayAngle)) + (7.7e-05)*(np.sin(2.0 * DayAngle))
    I0=re*(1370)
    I0h=I0*(np.cos(np.radians(var.SunZen)))
    Ztemp=var.SunZen
    Ztemp[var.SunZen > 87]=87
    AM=1.0 / (np.cos(np.radians(Ztemp)) + 0.15*(((93.885 - Ztemp) ** (- 1.253))))*(var.pressure) / 101325
    Kt=var.GHI / (I0h)
    Kt[Kt < 0]=0
    temp.A[Kt > 0.6]=- 5.743 + 21.77*(Kt[Kt > 0.6]) - 27.49*(Kt[Kt > 0.6] ** 2) + 11.56*(Kt[Kt > 0.6] ** 3)
    temp.B[Kt > 0.6]=41.4 - 118.5*(Kt[Kt > 0.6]) + 66.05*(Kt[Kt > 0.6] ** 2) + 31.9*(Kt[Kt > 0.6] ** 3)
    temp.C[Kt > 0.6]=- 47.01 + 184.2*(Kt[Kt > 0.6]) - 222.0 * Kt[Kt > 0.6] ** 2 + 73.81*(Kt[Kt > 0.6] ** 3)
    temp.A[(Kt <= 0.6-1)]=0.512 - 1.56*(Kt[(Kt <= 0.6-1)]) + 2.286*(Kt[(Kt <= 0.6-1)] ** 2) - 2.222*(Kt[(Kt <= 0.6-1)] ** 3)
    temp.B[(Kt <= 0.6-1)]=0.37 + 0.962*(Kt[(Kt <= 0.6-1)])
    temp.C[(Kt <= 0.6-1)]=- 0.28 + 0.932*(Kt[(Kt <= 0.6-1)]) - 2.048*(Kt[(Kt <= 0.6-1)] ** 2)
    #return to numeric after masking operations 
    temp=temp.astype(float)
    delKn=temp.A + temp.B*((temp.C*(AM)).apply(np.exp))
    Knc=0.866 - 0.122*(AM) + 0.0121*(AM ** 2) - 0.000653*(AM ** 3) + 1.4e-05*(AM ** 4)
    Kn=Knc - delKn
    DNI=(Kn)*(I0)

    # DNI[var.SunZen > 87]=0
    # DNI[var.GHI < 1]=0
    # DNI[DNI < 0]=0

    DFOut=pd.DataFrame({'DNI_gen_DISC':DNI})

    DFOut['Kt_gen_DISC']=Kt
    DFOut['AM']=AM
    DFOut['Ztemp']=Ztemp
    
    return DFOut
