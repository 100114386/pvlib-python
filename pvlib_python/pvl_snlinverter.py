# Autogenerated with SMOP version 0.23
# /usr/local/bin/smop pvl_snlinverter.m -o python/pvl_snlinverter.py
from __future__ import division
import numpy as np
from scipy.io import loadmat,savemat
import os
import pvl_tools
import pdb

def pvl_snlinverter(**kwargs):
    Expect={'DataFrame':'df',
        'Inverter':(''),
        'Vmp':('matelement','num'),
        'Pmp':('matelement','num')}

    var=pvl_tools.Parse(kwargs,Expect)
    
    Paco=var.Inverter['Paco']
    Pdco=var.Inverter['Pdco']
    Vdco=var.Inverter['Vdco']
    Pso=var.Inverter['Pso']
    C0=var.Inverter['C0']
    C1=var.Inverter['C1']
    C2=var.Inverter['C2']
    C3=var.Inverter['C3']
    Pnt=var.Inverter['Pnt']
    

    A=Pdco*((1 + C1*((var.DataFrame.Vmp - Vdco))))
    B=Pso*((1 + C2*((var.DataFrame.Vmp - Vdco))))
    C=C0*((1 + C3*((var.DataFrame.Vmp - Vdco))))
    ACPower=((Paco / (A - B)) - C*((A - B)))*((var.DataFrame.Pmp - B)) + C*((var.DataFrame.Pmp - B) ** 2)
    ACPower[ACPower > Paco]=Paco
    ACPower[ACPower < Pso]=- 1.0 * abs(Pnt)
    var.DataFrame['ACPower']=ACPower    
    return var.DataFrame
